{"version":3,"file":"static/js/955.8c949d5c.chunk.js","mappings":"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","sources":["components/Forms/Forms.styled.jsx","components/Global/Global.styled.jsx","components/Modals/Modal.styles.jsx","components/Modals/ModalLayout.jsx","components/AdminPage/OrderPage/OrderHeader/OrderHeader.styled.jsx","components/AdminPage/OrderPage/OrderHeader/OrderHeader.jsx","components/AdminPage/OrderPage/OrderForm/OrderForm.styled.jsx","components/AdminPage/OrderPage/OrderForm/OrderForm.jsx","components/AdminPage/OrderPage/OrderServices/OrderServices.styled.jsx","components/AdminPage/OrderPage/OrderServices/OrderServices.jsx","components/AdminPage/OrderPage/OrderPayments/OrderPayments.styled.jsx","components/Modals/ModalAddDiscount/ModalAddDiscount.jsx","components/AdminPage/OrderPage/OrderPayments/OrderPayments.jsx","pages/Order/Order.styled.jsx","pages/Order/Order.jsx","redux/auth/authSelectors.js","redux/employees/employeesSelectors.js","redux/orders/ordersSelectors.js","redux/services/servicesSelectors.js","utils/formatedDate.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Select, TextField, Checkbox, MenuItem } from '@mui/material';\n\nexport const Title = styled.h3`\n  margin-bottom: 20px;\n  text-align: center;\n  color: black;\n  font-size: 24px;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  justify-content: center;\n  align-items: start;\n  flex-direction: column;\n  flex-wrap: wrap;\n  gap: 12px;\n  color: black;\n`;\n\nexport const Label = styled.label`\n  width: 100%;\n  max-width: 100%;\n  color: var(--label-color);\n  font-size: 12px;\n`;\n\nexport const LabelText = styled.p`\n  margin-bottom: 4px;\n`;\n\nexport const Input = styled(TextField)`\n  width: 100%;\n`;\n\nexport const FormSelect = styled(Select)`\n  width: 100%;\n`;\n\nexport const SelectOption = styled(MenuItem)``;\n\nexport const FormCheckbox = styled(Checkbox)``;\n","import styled from '@emotion/styled';\n\nexport const MainContainer = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 15px;\n  padding-right: 15px;\n\n  max-width: 480px;\n\n  @media screen and (min-width: 768px) {\n    max-width: 768px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    max-width: 1200px;\n  }\n`;\n\nexport const AdminContainer = styled.div`\n  width: 100%;\n  max-width: 1600px;\n  @media screen and (min-width: 768px) {\n    padding: 0 30px;\n  }\n  @media screen and (min-width: 1200px) {\n    padding: 0 80px;\n  }\n`;\n\nexport const Section = styled.section`\n  padding-top: 80px;\n  padding-bottom: ${props => props.paddingBottom && `80px`};\n\n  // @media screen and (min-width: 768px) {\n  //   padding-top: 80px;\n  //   padding-bottom: ${props => props.paddingBottom && `80px`};\n  // }\n`;\n\nexport const SectionTitle = styled.h2`\n  text-align: center;\n  margin-bottom: 30px;\n\n  font-weight: 700;\n  font-size: 28px;\n  line-height: 1.17;\n\n  @media screen and (min-width: 1200px) {\n    margin-bottom: 50px;\n\n    font-size: 36px;\n  }\n`;\n\nexport const MainButton = styled.button`\n  ${props =>\n    props.position &&\n    `position: absolute;\n    top: 20px;\n    right: 20px;\n  `};\n\n  margin: ${props => props.margin && `0 auto`};\n  height: 50px;\n  min-width: 200px;\n\n  color: ${props => (props.color ? props.color : 'var(--white-color)')};\n  background-color: transparent;\n  box-shadow: 0px 0px 20px var(--accent-color);\n\n  font-weight: 400;\n  font-size: 13px;\n  letter-spacing: 0.07em;\n\n  border-radius: 25px;\n  border: 1px solid var(--accent-color);\n  cursor: pointer;\n  transition: background-color var(--transition), color var(--transition);\n\n  &:hover,\n  &:focus {\n    background-color: var(--accent-color);\n    color: var(--black-color);\n  }\n\n  opacity: 0;\n  animation: fadeIn 0.5s ease-in-out forwards;\n`;\n\nexport const MainLinkButton = styled.a`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  min-height: 50px;\n  min-width: 200px;\n\n  box-shadow: 0px 0px 20px var(--accent-color);\n\n  font-weight: 400;\n  font-size: 13px;\n  letter-spacing: 0.07em;\n\n  @media screen and (min-width: 1200px) {\n    font-size: 12px;\n  }\n\n  color: var(--white-color);\n  background-color: transparent;\n\n  border-radius: 25px;\n  border: 1px solid var(--accent-color);\n  cursor: pointer;\n  transition: background-color var(--transition), color var(--transition);\n\n  &:hover,\n  &:focus {\n    background-color: var(--accent-color);\n    color: var(--black-color);\n  }\n`;\n","import styled from '@emotion/styled';\nimport { AiOutlineClose } from 'react-icons/ai';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1000;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: var(--backdrop-color);\n\n  transition: transform var(--transition), opacity var(--transition),\n    visibility var(--transition);\n\n  visibility: ${props => (props.isOpen ? 'visible' : 'hidden')};\n  opacity: ${props => (props.isOpen ? '1' : '0')};\n  pointer-events: ${props => (props.isOpen ? 'auto' : 'none')};\n  transform: ${props => (props.isOpen ? 'scale(1)' : 'scale(1.5)')};\n`;\n\nexport const Modal = styled.div`\n  position: relative;\n\n  padding: 30px;\n  max-width: 480px;\n  width: 100%;\n  background-color: var(--white-color);\n\n  border: 4px solid var(--accent-color);\n  border-radius: 12px;\n\n  @media screen and (min-width: 768px) {\n    max-width: 768px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    max-width: 1200px;\n  }\n`;\n\nexport const Title = styled.h3`\n  margin-bottom: 20px;\n  text-align: center;\n  color: black;\n  font-size: 24px;\n`;\n\nexport const Text = styled.p`\n  text-align: center;\n  font-size: 20px;\n  color: var(--black-color);\n`;\n\nexport const CloseButton = styled.button`\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  background-color: transparent;\n  border: none;\n\n  cursor: pointer;\n`;\n\nexport const CloseIcon = styled(AiOutlineClose)`\n  width: 30px;\n  height: 30px;\n`;\n","import { Backdrop, Modal, CloseButton, CloseIcon } from './Modal.styles';\n\nexport const ModalLayout = props => {\n  return (\n    <Backdrop onClick={e => props.handleBackdropClick(e)} isOpen={props.isOpen}>\n      <Modal>\n        <CloseButton onClick={() => props.handleExitModal()}>\n          <CloseIcon />\n        </CloseButton>\n        {props.children}\n      </Modal>\n    </Backdrop>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Header = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n  padding-bottom: 12px;\n  border-bottom: 2px solid var(--white-color);\n`;\n\nexport const Title = styled.h2`\n  font-size: 14px;\n  @media screen and (min-width: 768px) {\n    font-size: 20px;\n  }\n`;\n\nexport const MarkUrgency = styled.b`\n  display: inline-block;\n  margin-left: 20px;\n  margin-right: 20px;\n  padding: 5px;\n  background-color: red;\n  border-radius: 12px;\n  font-size: 12px;\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n\nexport const Status = styled.div`\n  position: relative;\n  display: inline-block;\n  margin-left: auto;\n  opacity: 0.6;\n  transition: opacity var(--transition);\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const StatusButton = styled.div`\n  display: inline-block;\n  padding: 10px;\n  background-color: ${props => {\n    switch (props.color) {\n      case 'Виконане':\n        return 'var(--filter-completed-color)';\n      case 'В роботі':\n        return 'var(--filter-inProcess-color)';\n      case 'Скасоване':\n        return 'var(--filter-cancelled-color)';\n      default:\n        return 'var(--filter-new-color)';\n    }\n  }};\n  color: var(--black-color);\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  position: relative;\n  font-size: 12px;\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n\nexport const StatusSelect = styled.select`\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n`;\n","import { useDispatch } from 'react-redux';\nimport { updateOrderByNumber } from 'redux/orders/ordersOperations';\n\nimport {\n  Header,\n  Title,\n  MarkUrgency,\n  Status,\n  StatusSelect,\n  StatusButton,\n} from './OrderHeader.styled';\n\nexport const OrderHeader = ({ order }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Header>\n      <Title>{`Замовлення: ${order.orderNumber}`}</Title>\n      {order.urgently && <MarkUrgency>Терміново!</MarkUrgency>}\n\n      <Status>\n        <StatusButton color={order.status}>{order.status}</StatusButton>\n        <StatusSelect\n          onChange={e => {\n            dispatch(\n              updateOrderByNumber({\n                number: order.orderNumber,\n                data: { status: e.target.value },\n              })\n            );\n          }}\n        >\n          <option value=\"\"></option>\n          <option value=\"В роботі\"> В роботі </option>\n          <option value=\"Виконане\"> Виконане </option>\n          <option value=\"Скасоване\"> Скасоване</option>\n        </StatusSelect>\n      </Status>\n    </Header>\n  );\n};\n","import styled from '@emotion/styled';\nimport { FiEdit } from 'react-icons/fi';\n\nexport const Form = styled.form`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  gap: 8px;\n  margin-bottom: 20px;\n  padding-bottom: 12px;\n  border-bottom: 2px solid var(--white-color);\n`;\n\nexport const EditButton = styled.button`\n  position: absolute;\n  top: 0;\n  right: 0;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  transition: scale var(--transition);\n  &:hover {\n    scale: 1.2;\n  }\n`;\nexport const EditIcon = styled(FiEdit)`\n  width: 30px;\n  height: 30px;\n  color: yellow;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  font-size: 12px;\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n\nexport const TextArea = styled.textarea`\n  padding: 5px;\n  resize: none;\n  border: none;\n  border-radius: 8px;\n  transition: background-color var(--transition), color var(--transition);\n  :disabled {\n    background-color: transparent;\n    color: var(--white-color);\n  }\n`;\n\nexport const Input = styled.input`\n  padding: 5px;\n  border: none;\n  border-radius: 8px;\n  transition: background-color var(--transition), color var(--transition);\n  :disabled {\n    background-color: transparent;\n    color: var(--white-color);\n  }\n`;\n\nexport const Select = styled.select`\n  padding: 5px;\n  border: none;\n  border-radius: 8px;\n  transition: background-color var(--transition), color var(--transition);\n  :disabled {\n    background-color: transparent;\n    color: var(--white-color);\n    opacity: 1;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { updateOrderByNumber } from 'redux/orders/ordersOperations';\nimport { formatedDate } from 'utils/formatedDate';\n\nimport {\n  Form,\n  EditButton,\n  EditIcon,\n  Label,\n  TextArea,\n  Input,\n  Select,\n} from './OrderForm.styled';\nimport { MainButton } from 'components/Global/Global.styled';\n\nexport const OrderForm = ({ order, employees, admins }) => {\n  const [isEdit, setEdit] = useState(false);\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      washer: order.washer || '',\n      clientComment: order.clientComment || '',\n      clientName: order.clientName || '',\n      clientPhone: order.clientPhone || '',\n      serviceObject: order.serviceObject || '',\n      orderDate: order.orderDate || '',\n      administrator: order.administrator || '',\n      payment: order.payment || '',\n    },\n    onSubmit: values => {\n      dispatch(\n        updateOrderByNumber({ number: order.orderNumber, data: values })\n      );\n      setEdit(false);\n    },\n  });\n\n  return (\n    <Form onSubmit={formik.handleSubmit}>\n      <EditButton type=\"button\" onClick={() => setEdit(!isEdit)}>\n        <EditIcon />\n      </EditButton>\n      <Label>\n        Коментар:\n        <TextArea\n          disabled={!isEdit}\n          cols=\"60\"\n          type=\"text\"\n          id=\"clientComment\"\n          name=\"clientComment\"\n          value={formik.values.clientComment}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        />\n      </Label>\n      <Label>\n        Клієнт:\n        <Input\n          disabled={!isEdit}\n          type=\"text\"\n          id=\"clientName\"\n          name=\"clientName\"\n          value={formik.values.clientName}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        />\n      </Label>\n      <Label>\n        Контакти:\n        <Input\n          disabled={!isEdit}\n          type=\"text\"\n          id=\"clientPhone\"\n          name=\"clientPhone\"\n          value={formik.values.clientPhone}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        />\n      </Label>\n      <Label>\n        Об'єкт послуг:\n        <Input\n          disabled={!isEdit}\n          type=\"text\"\n          id=\"serviceObject\"\n          name=\"serviceObject\"\n          value={formik.values.serviceObject}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        />\n      </Label>\n      <Label>\n        Дата та час заїзду:\n        <Input\n          disabled={!isEdit}\n          type=\"datetime-local\"\n          id=\"orderDate\"\n          name=\"orderDate\"\n          value={formik.values.orderDate}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        />\n      </Label>\n      {order.orderExecutionDate && (\n        <p>{`Дата та час виконання: ${formatedDate(\n          order.orderExecutionDate\n        )}`}</p>\n      )}\n      <Label>\n        Оплата:\n        <Select\n          disabled={!isEdit}\n          id=\"payment\"\n          name=\"payment\"\n          value={formik.values.payment}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        >\n          <option value=\"\"> </option>\n          <option value=\"Готівка\">Готівка </option>\n          <option value=\"Безготівка\">Безготівка </option>\n        </Select>\n      </Label>\n      <Label>\n        Адміністратор:\n        <Select\n          disabled={!isEdit}\n          required\n          id=\"administrator\"\n          name=\"administrator\"\n          value={formik.values.administrator}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        >\n          <option value=\"\"> </option>\n          {admins &&\n            admins.map(admin => (\n              <option value={admin.name} key={admin._id}>\n                {admin.name}\n              </option>\n            ))}\n        </Select>\n      </Label>\n\n      <Label>\n        Працівник:\n        <Select\n          disabled={!isEdit}\n          required\n          id=\"washer\"\n          name=\"washer\"\n          value={formik.values.washer}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        >\n          <option value=\"\"> </option>\n          {employees &&\n            employees.map(employee => (\n              <option value={employee.name} key={employee._id}>\n                {employee.name}\n              </option>\n            ))}\n        </Select>\n      </Label>\n      {isEdit && <MainButton type=\"submit\">Зберегти зміни</MainButton>}\n    </Form>\n  );\n};\n","import styled from '@emotion/styled';\nimport { FiTrash2 } from 'react-icons/fi';\n\nexport const ServicesContainer = styled.div`\n  padding-bottom: 12px;\n  margin-bottom: 20px;\n  border-bottom: 2px solid var(--white-color);\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nexport const PartTitle = styled.h3`\n  font-size: 14px;\n  @media screen and (min-width: 768px) {\n    font-size: 20px;\n  }\n`;\n\nexport const AddServices = styled.div`\n  position: relative;\n  display: inline-block;\n  margin-left: auto;\n  opacity: 0.7;\n  transition: opacity var(--transition);\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const AddServicesButton = styled.div`\n  position: relative;\n  display: inline-block;\n  padding: 10px;\n  background-color: #007bff;\n  color: var(--black-color);\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n\n  font-size: 12px;\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n\nexport const ServicesSelect = styled.select`\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n`;\n\n// Табличка з послугами\n\nexport const Table = styled.table`\n  width: 100%;\n  min-height: 90px;\n  border-collapse: collapse;\n  border-spacing: 0;\n  background-color: var(--table-background);\n  color: black;\n  font-size: 12px;\n  border-radius: 8px;\n  overflow: hidden;\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n\nexport const TableHead = styled.thead`\n  background-color: var(--table-head);\n  color: #fff;\n  text-align: left;\n`;\n\nexport const TableRow = styled.tr`\n  &:nth-of-type(even) {\n    background-color: var(--table-row);\n  }\n`;\n\nexport const TableHeader = styled.th`\n  padding: 10px;\n  width: max-content;\n`;\n\nexport const TableNameHeader = styled.th`\n  padding: 10px;\n  width: 60%;\n`;\n\nexport const TableData = styled.td`\n  padding: 10px;\n`;\n\nexport const AmountInput = styled.input`\n  width: 50px;\n`;\n\nexport const DeleteBtn = styled.button`\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n  opacity: 0.5;\n  transition: opacity var(--transition);\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const DeleteIcon = styled(FiTrash2)`\n  width: 25px;\n  height: 25px;\n  color: red;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllServices } from 'redux/services/servicesOperations';\nimport { selectGetAllServices } from 'redux/services/servicesSelectors';\nimport { updateOrderByNumber } from 'redux/orders/ordersOperations';\n\nimport {\n  ServicesContainer,\n  Header,\n  PartTitle,\n  AddServices,\n  AddServicesButton,\n  ServicesSelect,\n  Table,\n  TableHead,\n  TableRow,\n  TableNameHeader,\n  TableHeader,\n  TableData,\n  AmountInput,\n  DeleteBtn,\n  DeleteIcon,\n} from './OrderServices.styled';\n\nexport const OrderServices = ({ services, orderNumber }) => {\n  const allServices = useSelector(selectGetAllServices);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllServices());\n  }, [dispatch]);\n\n  const handleAddService = service => {\n    if (\n      !services.some(existingService => existingService._id === service._id)\n    ) {\n      const updatedServices = [...services, service];\n      dispatch(\n        updateOrderByNumber({\n          number: orderNumber,\n          data: { services: updatedServices },\n        })\n      );\n    }\n  };\n\n  const handleDeleteService = serviceId => {\n    const updatedServices = services.filter(\n      preService => preService._id !== serviceId\n    );\n    dispatch(\n      updateOrderByNumber({\n        number: orderNumber,\n        data: { services: updatedServices },\n      })\n    );\n  };\n\n  const handleChangeAmount = (serviceId, newAmount) => {\n    const updatedServices = services.map(service => {\n      if (service._id === serviceId) {\n        return { ...service, amount: newAmount };\n      }\n      return service;\n    });\n    dispatch(\n      updateOrderByNumber({\n        number: orderNumber,\n        data: { services: updatedServices },\n      })\n    );\n  };\n\n  return (\n    <ServicesContainer>\n      <Header>\n        <PartTitle>Послуги:</PartTitle>\n        <AddServices>\n          <AddServicesButton>Додати послугу</AddServicesButton>\n          <ServicesSelect\n            onChange={e => handleAddService(JSON.parse(e.target.value))}\n          >\n            <option value=\"\"></option>\n            {allServices.map(service => (\n              <option value={JSON.stringify(service)} key={service._id}>\n                {`${service.name}. ${service.price}грн`}\n              </option>\n            ))}\n          </ServicesSelect>\n        </AddServices>\n      </Header>\n\n      {services && (\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableNameHeader>Назва</TableNameHeader>\n              <TableHeader>Кількість</TableHeader>\n              <TableHeader>Вартість</TableHeader>\n              <TableHeader>Сума</TableHeader>\n              <TableHeader></TableHeader>\n            </TableRow>\n          </TableHead>\n          <tbody>\n            {services.map(service => (\n              <TableRow key={service._id}>\n                <TableData>{service.name}</TableData>\n                <TableData>\n                  {service.pricePerMeter ? (\n                    <AmountInput\n                      type=\"number\"\n                      defaultValue={service.amount || 1}\n                      min=\"1\"\n                      onChange={e =>\n                        handleChangeAmount(service._id, e.target.value)\n                      }\n                    />\n                  ) : (\n                    1\n                  )}\n                </TableData>\n\n                <TableData>{service.price}</TableData>\n                <TableData>{service.price * (service.amount || 1)}</TableData>\n                <TableData>\n                  <DeleteBtn onClick={() => handleDeleteService(service._id)}>\n                    <DeleteIcon />\n                  </DeleteBtn>\n                </TableData>\n              </TableRow>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </ServicesContainer>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const PaymentsContainer = styled.div`\n  padding-bottom: 12px;\n`;\n\nexport const PartHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nexport const PartTitle = styled.h3`\n  font-size: 14px;\n  @media screen and (min-width: 768px) {\n    font-size: 20px;\n  }\n`;\n\nexport const AddDiscountButton = styled.button`\n  padding: 10px;\n  background-color: #007bff;\n  color: var(--black-color);\n  font-size: 12px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  opacity: 0.7;\n  transition: opacity var(--transition);\n  &:hover {\n    opacity: 1;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n\nexport const PaymentsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nexport const Payment = styled.li`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Text = styled.p`\n  font-size: 12px;\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useFormik } from 'formik';\n\nimport { ModalLayout } from '../ModalLayout';\nimport { Title } from '../Modal.styles';\nimport { Form, Input } from 'components/Forms/Forms.styled';\nimport { MainButton } from 'components/Global/Global.styled';\n\nimport { selectOrderByNumber } from 'redux/orders/ordersSelectors';\nimport { updateOrderByNumber } from 'redux/orders/ordersOperations';\n\nexport const ModalAddDiscount = props => {\n  const order = useSelector(selectOrderByNumber);\n\n  const dispatch = useDispatch();\n\n  const handleExitModal = () => {\n    props.handleExitModal(true);\n  };\n\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      handleExitModal(true);\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      discountPercent: '',\n    },\n    onSubmit: values => {\n      dispatch(\n        updateOrderByNumber({ number: order.orderNumber, data: { ...values } })\n      );\n      handleExitModal();\n    },\n  });\n\n  return (\n    <ModalLayout\n      handleExitModal={handleExitModal}\n      handleBackdropClick={handleBackdropClick}\n      isOpen={props.isOpen}\n    >\n      <Title>Додати знижку</Title>\n      <Form onSubmit={formik.handleSubmit}>\n        <Input\n          required\n          type=\"number\"\n          inputProps={{ min: '0' }}\n          id=\"discountPercent\"\n          name=\"discountPercent\"\n          label=\"Відсоток знижки\"\n          value={formik.values.discountPercent}\n          onChange={formik.handleChange}\n          variant=\"outlined\"\n          size=\"small\"\n        />\n        <MainButton type=\"submit\" color=\"var(--black-color)\" margin={true}>\n          Додати\n        </MainButton>\n      </Form>\n    </ModalLayout>\n  );\n};\n","import { useState } from 'react';\n\nimport {\n  PaymentsContainer,\n  PartHeader,\n  PartTitle,\n  AddDiscountButton,\n  PaymentsList,\n  Payment,\n  Text,\n} from './OrderPayments.styled';\nimport { ModalAddDiscount } from 'components/Modals/ModalAddDiscount/ModalAddDiscount';\n\nexport const OrderPayments = ({ order }) => {\n  const [isOpenModal, setOpenModal] = useState(false);\n\n  const handleExitModal = () => {\n    setOpenModal(false);\n  };\n  return (\n    <PaymentsContainer>\n      <PartHeader>\n        <PartTitle>Розрахунок:</PartTitle>\n        <AddDiscountButton onClick={() => setOpenModal(true)}>\n          Додати знижку\n        </AddDiscountButton>\n      </PartHeader>\n      <PaymentsList>\n        <Payment>\n          <Text>Загальна вартість:</Text>\n          <Text>{`${order.totalCostOrder} грн`}</Text>\n        </Payment>\n        <Payment>\n          <Text>Знижка:</Text>\n          <Text>{`${order.discountPercent}%`}</Text>\n        </Payment>\n        <Payment>\n          <Text>Вартість зі знижкою:</Text>\n          <Text>{`${order.discountedCostOrder} грн`}</Text>\n        </Payment>\n        <Payment>\n          <Text>Виплата працівнику:</Text>\n          <Text>{`${order.washerPayment} грн`}</Text>\n        </Payment>\n        <Payment>\n          <Text>Виплата адміністратору:</Text>\n          <Text>{`${order.administratorPayment} грн`}</Text>\n        </Payment>\n        <Payment>\n          <Text>Дохід:</Text>\n          <Text>{`${order.revenue} грн`}</Text>\n        </Payment>\n      </PaymentsList>\n\n      <ModalAddDiscount\n        handleExitModal={handleExitModal}\n        isOpen={isOpenModal}\n      />\n    </PaymentsContainer>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const OrderCardContainer = styled.div`\n  overflow: auto;\n  padding: 15px;\n  background-color: var(--admin-items-bg-color);\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { Section } from 'components/Global/Global.styled';\nimport { OrderHeader } from 'components/AdminPage/OrderPage/OrderHeader/OrderHeader';\nimport { OrderForm } from 'components/AdminPage/OrderPage/OrderForm/OrderForm';\nimport { OrderServices } from 'components/AdminPage/OrderPage/OrderServices/OrderServices';\nimport { OrderPayments } from 'components/AdminPage/OrderPage/OrderPayments/OrderPayments';\nimport { Loading } from 'components/Loading/Loading';\n\nimport { getOrderByNumber } from 'redux/orders/ordersOperations';\nimport { getAllEmployees } from 'redux/employees/employeesOperations';\nimport { getAdministrators } from 'redux/auth/authOperations';\n\nimport {\n  selectEmployees,\n  selectIsLoadingEmployees,\n} from 'redux/employees/employeesSelectors';\nimport {\n  selectIsLoadingOrders,\n  selectOrderByNumber,\n} from 'redux/orders/ordersSelectors';\nimport { selectAdministrators } from 'redux/auth/authSelectors';\nimport { OrderCardContainer } from './Order.styled';\n\nconst OrderPage = () => {\n  const { id: number } = useParams();\n  const dispatch = useDispatch();\n\n  const order = useSelector(selectOrderByNumber);\n  const employees = useSelector(selectEmployees);\n  const admins = useSelector(selectAdministrators);\n  const isLoadingOrder = useSelector(selectIsLoadingOrders);\n  const isLoadingEmployees = useSelector(selectIsLoadingEmployees);\n\n  useEffect(() => {\n    dispatch(getAllEmployees());\n    dispatch(getAdministrators());\n    dispatch(getOrderByNumber(number));\n  }, [dispatch, number]);\n\n  if (isLoadingOrder || isLoadingEmployees) {\n    return <Loading />;\n  }\n\n  return (\n    <Section paddingBottom={true}>\n      <OrderCardContainer>\n        <OrderHeader order={order} />\n        <OrderForm order={order} employees={employees} admins={admins} />\n        <OrderServices\n          services={order.services}\n          orderNumber={order.orderNumber}\n        />\n        <OrderPayments order={order} />\n      </OrderCardContainer>\n    </Section>\n  );\n};\n\nexport default OrderPage;\n","export const selectAuth = state => {\n  const { isLoggedIn, token } = state.auth;\n  return { isLoggedIn, token };\n};\n\nexport const selectIsAuthLoading = state => state.auth.isLoading;\n\nexport const selectIsLoggedIn = state => state.auth.isLoggedIn;\n\nexport const selectUser = state => state.auth.user;\n\nexport const selectError = state => state.auth.error;\n\nexport const selectToken = state => state.auth.token;\n\nexport const selectAdministrators = state => state.auth.administrators;\n","export const selectEmployees = state => state.employees.items;\n\nexport const selectIsLoadingEmployees = state => state.employees.isLoading;\n\nexport const selectIsUpdating = state => state.employees.isUpdating;\n","export const selectOrders = state => state.orders.items;\n\nexport const selectOrderByNumber = state => state.orders.orderByNumber;\n\nexport const selectIsLoadingOrders = state => state.orders.isLoading;\n\nexport const selectTotalPages = state => state.orders.totalPages;\n\nexport const selectTotalOrders = state => state.orders.totalOrders;\n","export const selectGetAllServices = state => state.services.items;\n\nexport const selectIsLoadingServices = state => state.services.isLoading;\n","export function formatedDate(unformatedDate) {\n  const dateTime = new Date(unformatedDate);\n\n  const date = dateTime.toLocaleDateString('uk-UA', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n  });\n\n  const time = dateTime.toLocaleTimeString('uk-UA', {\n    hour: '2-digit',\n    minute: '2-digit',\n  });\n\n  return `${date} ${time}`;\n}\n"],"names":["Form","styled","Label","LabelText","Input","TextField","FormSelect","Select","SelectOption","MenuItem","FormCheckbox","Checkbox","MainContainer","AdminContainer","Section","props","paddingBottom","SectionTitle","MainButton","position","margin","color","MainLinkButton","Backdrop","isOpen","Modal","Title","Text","CloseButton","CloseIcon","AiOutlineClose","ModalLayout","onClick","e","handleBackdropClick","handleExitModal","children","Header","MarkUrgency","Status","StatusButton","StatusSelect","OrderHeader","order","dispatch","useDispatch","orderNumber","urgently","status","onChange","updateOrderByNumber","number","data","target","value","EditButton","EditIcon","FiEdit","TextArea","OrderForm","employees","admins","useState","isEdit","setEdit","formik","useFormik","initialValues","washer","clientComment","clientName","clientPhone","serviceObject","orderDate","administrator","payment","onSubmit","values","handleSubmit","type","disabled","cols","id","name","handleChange","variant","orderExecutionDate","formatedDate","required","map","admin","_id","employee","ServicesContainer","PartTitle","AddServices","AddServicesButton","ServicesSelect","Table","TableHead","TableRow","TableHeader","TableNameHeader","TableData","AmountInput","DeleteBtn","DeleteIcon","FiTrash2","OrderServices","services","allServices","useSelector","selectGetAllServices","useEffect","getAllServices","service","some","existingService","updatedServices","handleAddService","JSON","parse","stringify","price","pricePerMeter","defaultValue","amount","min","serviceId","newAmount","handleChangeAmount","filter","preService","handleDeleteService","PaymentsContainer","PartHeader","AddDiscountButton","PaymentsList","Payment","ModalAddDiscount","selectOrderByNumber","discountPercent","currentTarget","inputProps","label","size","OrderPayments","isOpenModal","setOpenModal","totalCostOrder","discountedCostOrder","washerPayment","administratorPayment","revenue","OrderCardContainer","useParams","selectEmployees","selectAdministrators","isLoadingOrder","selectIsLoadingOrders","isLoadingEmployees","selectIsLoadingEmployees","getAllEmployees","getAdministrators","getOrderByNumber","Loading","selectIsLoggedIn","state","auth","isLoggedIn","selectUser","user","administrators","items","isLoading","selectIsUpdating","isUpdating","selectOrders","orders","orderByNumber","selectTotalPages","totalPages","selectTotalOrders","totalOrders","selectIsLoadingServices","unformatedDate","dateTime","Date","date","toLocaleDateString","day","month","year","time","toLocaleTimeString","hour","minute"],"sourceRoot":""}