{"version":3,"file":"static/js/569.df297666.chunk.js","mappings":"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","sources":["components/Forms/Forms.styled.jsx","components/Global/Global.styled.jsx","components/Modals/Modal.styles.jsx","components/Modals/ModalLayout.jsx","components/Modals/ModaAddOrder/ModaAddOrder.jsx","components/AdminPage/OrdersPage/OrdersList/OrdersList.styled.jsx","components/AdminPage/OrdersPage/OrdersItem/OrdersItem.styled.jsx","components/AdminPage/OrdersPage/OrdersItem/OrdersItem.jsx","components/AdminPage/OrdersPage/OrdersList/OrdersList.jsx","components/AdminPage/OrdersPage/OrdersFilterList/OrdersFilterList.styled.jsx","components/AdminPage/OrdersPage/OrdersFilterList/OrdersFilterList.jsx","pages/Orders/Orders.jsx","redux/employees/employeesSelectors.js","redux/orders/ordersSelectors.js","redux/services/servicesSelectors.js","utils/formatedDate.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Select, TextField, Checkbox, MenuItem } from '@mui/material';\n\nexport const Title = styled.h3`\n  margin-bottom: 20px;\n  text-align: center;\n  color: black;\n  font-size: 24px;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  justify-content: center;\n  align-items: start;\n  flex-direction: column;\n  flex-wrap: wrap;\n  gap: 12px;\n  color: black;\n`;\n\nexport const Label = styled.label`\n  width: 100%;\n  max-width: 100%;\n  color: var(--label-color);\n  font-size: 12px;\n`;\n\nexport const LabelText = styled.p`\n  margin-bottom: 4px;\n`;\n\nexport const Input = styled(TextField)`\n  width: 100%;\n`;\n\nexport const FormSelect = styled(Select)`\n  width: 100%;\n`;\n\nexport const SelectOption = styled(MenuItem)``;\n\nexport const FormCheckbox = styled(Checkbox)``;\n","import styled from '@emotion/styled';\n\nexport const MainContainer = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 15px;\n  padding-right: 15px;\n\n  max-width: 480px;\n\n  @media screen and (min-width: 768px) {\n    max-width: 768px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    max-width: 1200px;\n  }\n`;\n\nexport const AdminContainer = styled.div`\n  width: 100%;\n  @media screen and (min-width: 768px) {\n    padding: 0 30px;\n  }\n  @media screen and (min-width: 1200px) {\n    padding: 0 80px;\n  }\n`;\n\nexport const HeaderContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 12px;\n  margin-bottom: 60px;\n`;\n\nexport const Section = styled.section`\n  padding-top: 60px;\n  padding-bottom: ${props => props.paddingBottom && `60px`};\n\n  @media screen and (min-width: 768px) {\n    padding-top: 80px;\n    padding-bottom: ${props => props.paddingBottom && `80px`};\n  }\n`;\n\nexport const SectionTitle = styled.h2`\n  text-align: center;\n  margin-bottom: 30px;\n\n  font-weight: 700;\n  font-size: 28px;\n  line-height: 1.17;\n\n  @media screen and (min-width: 1200px) {\n    margin-bottom: 50px;\n\n    font-size: 36px;\n  }\n`;\n\nexport const MainButton = styled.button`\n  margin: ${props => props.margin && `0 auto`};\n  height: 50px;\n  min-width: 200px;\n\n  color: ${props => (props.color ? props.color : 'var(--white-color)')};\n  background-color: transparent;\n  box-shadow: 0px 0px 20px var(--accent-color);\n\n  font-weight: 400;\n  font-size: 13px;\n  letter-spacing: 0.07em;\n\n  border-radius: 25px;\n  border: 1px solid var(--accent-color);\n  cursor: pointer;\n  transition: background-color var(--transition), color var(--transition);\n\n  &:hover,\n  &:focus {\n    background-color: var(--accent-color);\n    color: var(--black-color);\n  }\n\n  opacity: 0;\n  animation: fadeIn 0.5s ease-in-out forwards;\n`;\n\nexport const MainLinkButton = styled.a`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  min-height: 50px;\n  min-width: 200px;\n\n  box-shadow: 0px 0px 20px var(--accent-color);\n\n  font-weight: 400;\n  font-size: 13px;\n  letter-spacing: 0.07em;\n\n  @media screen and (min-width: 1200px) {\n    font-size: 12px;\n  }\n\n  color: var(--white-color);\n  background-color: transparent;\n\n  border-radius: 25px;\n  border: 1px solid var(--accent-color);\n  cursor: pointer;\n  transition: background-color var(--transition), color var(--transition);\n\n  &:hover,\n  &:focus {\n    background-color: var(--accent-color);\n    color: var(--black-color);\n  }\n`;\n","import styled from '@emotion/styled';\nimport { AiOutlineClose } from 'react-icons/ai';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1000;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: var(--backdrop-color);\n\n  transition: transform var(--transition), opacity var(--transition),\n    visibility var(--transition);\n\n  visibility: ${props => (props.isOpen ? 'visible' : 'hidden')};\n  opacity: ${props => (props.isOpen ? '1' : '0')};\n  pointer-events: ${props => (props.isOpen ? 'auto' : 'none')};\n  transform: ${props => (props.isOpen ? 'scale(1)' : 'scale(1.5)')};\n`;\n\nexport const Modal = styled.div`\n  position: relative;\n\n  padding: 30px;\n  max-width: 480px;\n  width: 100%;\n  background-color: var(--white-color);\n\n  border: 4px solid var(--accent-color);\n  border-radius: 12px;\n\n  @media screen and (min-width: 768px) {\n    max-width: 768px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    max-width: 1200px;\n  }\n`;\n\nexport const Title = styled.h3`\n  margin-bottom: 20px;\n  text-align: center;\n  color: black;\n  font-size: 24px;\n`;\n\nexport const Text = styled.p`\n  text-align: center;\n  font-size: 20px;\n  color: var(--black-color);\n`;\n\nexport const CloseButton = styled.button`\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  background-color: transparent;\n  border: none;\n\n  cursor: pointer;\n`;\n\nexport const CloseIcon = styled(AiOutlineClose)`\n  width: 30px;\n  height: 30px;\n`;\n","import { Backdrop, Modal, CloseButton, CloseIcon } from './Modal.styles';\n\nexport const ModalLayout = props => {\n  return (\n    <Backdrop onClick={e => props.handleBackdropClick(e)} isOpen={props.isOpen}>\n      <Modal>\n        <CloseButton onClick={() => props.handleExitModal()}>\n          <CloseIcon />\n        </CloseButton>\n        {props.children}\n      </Modal>\n    </Backdrop>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useFormik } from 'formik';\n\nimport { ModalLayout } from '../ModalLayout';\nimport { Title } from '../Modal.styles';\nimport {\n  Form,\n  Label,\n  LabelText,\n  FormSelect,\n  Input,\n  SelectOption,\n  FormCheckbox,\n} from 'components/Forms/Forms.styled';\nimport { MainButton } from 'components/Global/Global.styled';\n\nimport { getAllServices } from 'redux/services/servicesOperations';\nimport { getAllEmployees } from 'redux/employees/employeesOperations';\n\nimport { selectGetAllServices } from 'redux/services/servicesSelectors';\nimport { selectEmployees } from 'redux/employees/employeesSelectors';\n\nimport { addNewOrder } from 'redux/orders/ordersOperations';\n\nexport const ModaAddOrder = props => {\n  const services = useSelector(selectGetAllServices);\n  const employees = useSelector(selectEmployees);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllServices());\n    dispatch(getAllEmployees());\n  }, [dispatch]);\n\n  const handleExitModal = () => {\n    props.handleExitModal(true);\n  };\n\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      handleExitModal(true);\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      clientName: '',\n      clientPhone: '',\n      serviceObject: '',\n      orderDate: '',\n      services: [],\n      washer: '',\n      administrator: '',\n      urgently: false,\n    },\n    onSubmit: values => {\n      const filteredValues = {};\n      for (const key in values) {\n        if (values[key] !== '') {\n          filteredValues[key] = values[key];\n        }\n      }\n      dispatch(addNewOrder(filteredValues));\n      handleExitModal();\n    },\n  });\n\n  return (\n    <ModalLayout\n      handleExitModal={handleExitModal}\n      handleBackdropClick={handleBackdropClick}\n      isOpen={props.isOpen}\n    >\n      <Title>Створити замовлення</Title>\n      <Form onSubmit={formik.handleSubmit}>\n        <Input\n          required\n          type=\"text\"\n          id=\"clientName\"\n          name=\"clientName\"\n          label=\"Ім'я клієнта\"\n          value={formik.values.clientName}\n          onChange={formik.handleChange}\n          variant=\"outlined\"\n          size=\"small\"\n        />\n        <Input\n          required\n          type=\"text\"\n          id=\"clientPhone\"\n          name=\"clientPhone\"\n          label=\"Телефон клієнта\"\n          value={formik.values.clientPhone}\n          onChange={formik.handleChange}\n          variant=\"outlined\"\n          size=\"small\"\n        />\n        <Input\n          required\n          type=\"text\"\n          id=\"serviceObject\"\n          name=\"serviceObject\"\n          label=\"Об'єкт послуг\"\n          value={formik.values.serviceObject}\n          onChange={formik.handleChange}\n          variant=\"outlined\"\n          size=\"small\"\n        />\n        <Label>\n          <LabelText>Час заїзду *</LabelText>\n          <Input\n            required\n            type=\"datetime-local\"\n            id=\"orderDate\"\n            name=\"orderDate\"\n            value={formik.values.orderDate}\n            onChange={formik.handleChange}\n            variant=\"outlined\"\n            size=\"small\"\n          />\n        </Label>\n        <Label>\n          <LabelText>Послуги</LabelText>\n          <FormSelect\n            multiple\n            id=\"services\"\n            name=\"services\"\n            value={formik.values.services}\n            onChange={formik.handleChange}\n            variant=\"outlined\"\n            size=\"small\"\n          >\n            {services.map(service => (\n              <SelectOption value={service} key={service._id}>\n                {`${service.name}. ${service.price}грн`}\n              </SelectOption>\n            ))}\n          </FormSelect>\n        </Label>\n        <Label>\n          <LabelText>Працівник</LabelText>\n          <FormSelect\n            id=\"washer\"\n            name=\"washer\"\n            value={formik.values.washer}\n            onChange={formik.handleChange}\n            variant=\"outlined\"\n            size=\"small\"\n          >\n            {employees.map(washer => (\n              <SelectOption value={washer.name} key={washer._id}>\n                {washer.name}\n              </SelectOption>\n            ))}\n          </FormSelect>\n        </Label>\n        <Label>\n          <FormCheckbox\n            checked={formik.values.urgently}\n            onChange={() =>\n              formik.setFieldValue('urgently', !formik.values.urgently)\n            }\n          />\n          Терміново!\n        </Label>\n        <MainButton type=\"submit\" color=\"var(--black-color)\" margin={true}>\n          Додати\n        </MainButton>\n      </Form>\n    </ModalLayout>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  list-style: none;\n`;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Item = styled.li`\n  padding: 15px;\n  min-width: content;\n  background-color: var(--admin-items-bg-color);\n  border-radius: 12px;\n`;\n\nexport const OrderHeader = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  margin-bottom: 12px;\n`;\n\nexport const MarkUrgency = styled.b`\n  display: inline-block;\n  padding: 5px;\n  background-color: red;\n  font-size: 10px;\n  border-radius: 12px;\n`;\n\nexport const OrderLink = styled(Link)`\n  font-size: 16px;\n  font-weight: 700;\n  color: var(--white-color);\n  &:hover {\n    color: var(--accent-color);\n  }\n`;\n\nexport const Status = styled.p`\n  padding: 5px;\n  margin-left: auto;\n  text-align: center;\n  min-width: max-content;\n  border: none;\n  border-radius: 8px;\n  color: var(--black-color);\n  background-color: ${props => {\n    switch (props.color) {\n      case 'Виконане':\n        return 'var(--filter-completed-color)';\n      case 'В роботі':\n        return 'var(--filter-inProcess-color)';\n      case 'Скасоване':\n        return 'var(--filter-cancelled-color)';\n      default:\n        return 'var(--filter-new-color)';\n    }\n  }};\n`;\n\nexport const PartContainer = styled.div`\n  display: flex;\n  gap: 25px;\n\n  @media screen and (max-width: 767px) {\n    flex-direction: column;\n  }\n`;\n\nexport const LeftSide = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const Text = styled.p``;\n","import {\n  Item,\n  OrderHeader,\n  MarkUrgency,\n  OrderLink,\n  Status,\n  PartContainer,\n  Text,\n  LeftSide,\n} from './OrdersItem.styled';\n\nimport { formatedDate } from 'utils/formatedDate';\n\nexport const OrdersItem = ({ order }) => (\n  <Item>\n    <OrderHeader>\n      <OrderLink to={`/admin/order/${order.orderNumber}`}>\n        {`Замовлення ${order.orderNumber}`}\n      </OrderLink>\n      {order.urgently && <MarkUrgency>Терміново!</MarkUrgency>}\n      <Status type=\"button\" color={order.status}>\n        {`${order.status}`}\n      </Status>\n    </OrderHeader>\n\n    <hr />\n\n    <PartContainer>\n      <LeftSide>\n        <Text>{`Клієнт: ${order.clientName}`}</Text>\n        <Text>{`Контакти: ${order.clientPhone}`}</Text>\n        <Text>{`Об'єкт замовлення: ${\n          order.serviceObject ? order.serviceObject : ''\n        }`}</Text>\n        <Text>{`Дата та час послуги: ${formatedDate(order.orderDate)}`}</Text>\n        {order.orderExecutionDate && (\n          <Text>{`Дата та час виконання: ${formatedDate(\n            order.orderExecutionDate\n          )}`}</Text>\n        )}\n      </LeftSide>\n    </PartContainer>\n\n    <hr />\n\n    <Text>{`Працівник: ${order.washer ? order.washer : ''}`}</Text>\n\n    <hr />\n\n    <Text>{`Вартість замовлення: ${order.discountedCostOrder} грн`}</Text>\n  </Item>\n);\n","// import { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\nimport { useSelector } from 'react-redux';\n// import { useLocation } from 'react-router-dom';\nimport { selectOrders } from 'redux/orders/ordersSelectors';\n// import { getAllOrders } from 'redux/orders/ordersOperations';\n\nimport { List } from './OrdersList.styled';\nimport { OrdersItem } from '../OrdersItem/OrdersItem';\n\nexport const OrdersList = () => {\n  const orders = useSelector(selectOrders);\n\n  // const dispatch = useDispatch();\n  // const location = useLocation();\n  // const queryParams = new URLSearchParams(location.search);\n  // const status = queryParams.get('status') || '';\n  // const page = queryParams.get('page') || 1;\n\n  // useEffect(() => {\n  //   dispatch(getAllOrders({ status, page }));\n  // }, [dispatch, status, page]);\n\n  return (\n    <List>\n      {orders.map(order => (\n        <OrdersItem key={order._id} order={order} />\n      ))}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FilterList = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 15px;\n  list-style: none;\n`;\n\nexport const FilterItem = styled.li``;\n\nexport const FilterButton = styled.button`\n  background-color: ${props => props.color};\n  padding: 5px;\n  min-width: 75px;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  opacity: 0.7;\n  transition: opacity var(--transition);\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const AmountOrders = styled.span`\n  margin-left: 5px;\n`;\n","import { useLocation, useNavigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { selectTotalOrders } from 'redux/orders/ordersSelectors';\n\nimport {\n  FilterList,\n  FilterItem,\n  FilterButton,\n  AmountOrders,\n} from './OrdersFilterList.styled';\n\nexport const OrdersFilterList = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const queryParams = new URLSearchParams(location.search);\n\n  const totalOrders = useSelector(selectTotalOrders);\n\n  const handleStatusFilter = query => {\n    queryParams.set('status', query);\n\n    navigate(\n      `/admin/orders?${query.length > 0 ? `status=${query}` : ''}&page=1`\n    );\n  };\n\n  return (\n    <FilterList>\n      <FilterItem>\n        <FilterButton\n          type=\"button\"\n          color=\"var(--filter-all-color)\"\n          onClick={e => {\n            handleStatusFilter('');\n          }}\n        >\n          Всі\n          <AmountOrders>\n            {totalOrders ? totalOrders.allOrders : '0'}\n          </AmountOrders>\n        </FilterButton>\n      </FilterItem>\n      <FilterItem>\n        <FilterButton\n          type=\"button\"\n          color=\"var(--filter-new-color)\"\n          onClick={e => {\n            handleStatusFilter('Нове');\n          }}\n        >\n          Нові\n          <AmountOrders>\n            {totalOrders ? totalOrders.newOrders : '0'}\n          </AmountOrders>\n        </FilterButton>\n      </FilterItem>\n      <FilterItem>\n        <FilterButton\n          type=\"button\"\n          color=\"var(--filter-inProcess-color)\"\n          onClick={e => {\n            handleStatusFilter('В роботі');\n          }}\n        >\n          В роботі\n          <AmountOrders>\n            {totalOrders ? totalOrders.inProcessOrders : '0'}\n          </AmountOrders>\n        </FilterButton>\n      </FilterItem>\n      <FilterItem>\n        <FilterButton\n          type=\"button\"\n          color=\"var(--filter-completed-color)\"\n          onClick={e => {\n            handleStatusFilter('Виконане');\n          }}\n        >\n          Виконані\n          <AmountOrders>\n            {totalOrders ? totalOrders.completedOrders : '0'}\n          </AmountOrders>\n        </FilterButton>\n      </FilterItem>\n      <FilterItem>\n        <FilterButton\n          type=\"button\"\n          color=\"var(--filter-cancelled-color)\"\n          onClick={e => {\n            handleStatusFilter('Скасоване');\n          }}\n        >\n          Скасовані\n          <AmountOrders>\n            {totalOrders ? totalOrders.cancelledOrders : '0'}\n          </AmountOrders>\n        </FilterButton>\n      </FilterItem>\n    </FilterList>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport ReactPaginate from 'react-paginate';\n\nimport { getAllOrders } from 'redux/orders/ordersOperations';\nimport { selectTotalPages } from 'redux/orders/ordersSelectors';\n\nimport {\n  Section,\n  HeaderContainer,\n  MainButton,\n} from 'components/Global/Global.styled';\nimport { ModaAddOrder } from 'components/Modals/ModaAddOrder/ModaAddOrder';\nimport { OrdersList } from '../../components/AdminPage/OrdersPage/OrdersList/OrdersList';\nimport { OrdersFilterList } from 'components/AdminPage/OrdersPage/OrdersFilterList/OrdersFilterList';\n\nconst OrdersPage = () => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const navigation = useNavigate();\n\n  const [isOpenModal, setOpenModal] = useState(false);\n  const totalPages = useSelector(selectTotalPages);\n  const queryParams = new URLSearchParams(location.search);\n  const status = queryParams.get('status') || '';\n  const page = queryParams.get('page') || 1;\n\n  useEffect(() => {\n    dispatch(getAllOrders({ status, page }));\n  }, [dispatch, status, page]);\n\n  const handleExitModal = () => {\n    setOpenModal(false);\n  };\n\n  const handlePageClick = e => {\n    const newPage = e.selected + 1;\n    queryParams.set('page', newPage);\n\n    navigation({\n      pathname: location.pathname,\n      search: `?status=${status}&page=${e.selected + 1}`,\n    });\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  return (\n    <Section paddingBottom={true}>\n      <HeaderContainer>\n        <OrdersFilterList />\n        <MainButton type=\"button\" onClick={() => setOpenModal(true)}>\n          Створити замовлення\n        </MainButton>\n      </HeaderContainer>\n\n      <OrdersList />\n      {Number(totalPages) > 1 && (\n        <ReactPaginate\n          breakLabel=\"...\"\n          nextLabel=\">\"\n          onPageChange={handlePageClick}\n          pageRangeDisplayed={Math.ceil(totalPages)}\n          pageCount={Math.ceil(totalPages)}\n          previousLabel=\"<\"\n          renderOnZeroPageCount={null}\n          className=\"react-paginate\"\n          initialPage={Number(page) - 1}\n        />\n      )}\n\n      <ModaAddOrder handleExitModal={handleExitModal} isOpen={isOpenModal} />\n    </Section>\n  );\n};\n\nexport default OrdersPage;\n","export const selectEmployees = state => state.employees.items;\n\nexport const selectIsLoadingEmployees = state => state.employees.isLoading;\n\nexport const selectIsUpdating = state => state.employees.isUpdating;\n","export const selectOrders = state => state.orders.items;\n\nexport const selectOrderByNumber = state => state.orders.orderByNumber;\n\nexport const selectIsLoadingOrders = state => state.orders.isLoading;\n\nexport const selectTotalPages = state => state.orders.totalPages;\n\nexport const selectTotalOrders = state => state.orders.totalOrders;\n","export const selectGetAllServices = state => state.services.items;\n\nexport const selectIsLoadingServices = state => state.services.isLoading;\n","export function formatedDate(unformatedDate) {\n  const dateTime = new Date(unformatedDate);\n\n  const date = dateTime.toLocaleDateString('uk-UA', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n  });\n\n  const time = dateTime.toLocaleTimeString('uk-UA', {\n    hour: '2-digit',\n    minute: '2-digit',\n  });\n\n  return `${date} ${time}`;\n}\n"],"names":["Form","styled","Label","LabelText","Input","TextField","FormSelect","Select","SelectOption","MenuItem","FormCheckbox","Checkbox","MainContainer","AdminContainer","HeaderContainer","Section","props","paddingBottom","SectionTitle","MainButton","margin","color","MainLinkButton","Backdrop","isOpen","Modal","Title","Text","CloseButton","CloseIcon","AiOutlineClose","ModalLayout","onClick","e","handleBackdropClick","handleExitModal","children","ModaAddOrder","services","useSelector","selectGetAllServices","employees","selectEmployees","dispatch","useDispatch","useEffect","getAllServices","getAllEmployees","formik","useFormik","initialValues","clientName","clientPhone","serviceObject","orderDate","washer","administrator","urgently","onSubmit","values","filteredValues","key","addNewOrder","target","currentTarget","handleSubmit","required","type","id","name","label","value","onChange","handleChange","variant","size","multiple","map","service","price","_id","checked","setFieldValue","List","Item","OrderHeader","MarkUrgency","OrderLink","Link","Status","PartContainer","LeftSide","OrdersItem","order","to","orderNumber","status","formatedDate","orderExecutionDate","discountedCostOrder","OrdersList","orders","selectOrders","FilterList","FilterItem","FilterButton","AmountOrders","OrdersFilterList","location","useLocation","navigate","useNavigate","queryParams","URLSearchParams","search","totalOrders","selectTotalOrders","handleStatusFilter","query","set","length","allOrders","newOrders","inProcessOrders","completedOrders","cancelledOrders","navigation","useState","isOpenModal","setOpenModal","totalPages","selectTotalPages","get","page","getAllOrders","Number","breakLabel","nextLabel","onPageChange","newPage","selected","pathname","window","scrollTo","top","behavior","pageRangeDisplayed","Math","ceil","pageCount","previousLabel","renderOnZeroPageCount","className","initialPage","state","items","selectIsLoadingEmployees","isLoading","selectIsUpdating","isUpdating","selectOrderByNumber","orderByNumber","selectIsLoadingOrders","selectIsLoadingServices","unformatedDate","dateTime","Date","date","toLocaleDateString","day","month","year","time","toLocaleTimeString","hour","minute"],"sourceRoot":""}