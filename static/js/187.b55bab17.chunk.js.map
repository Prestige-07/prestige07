{"version":3,"file":"static/js/187.b55bab17.chunk.js","mappings":"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","sources":["components/Global/Global.styled.jsx","components/AdminPage/OrderPage/OrderHeader/OrderHeader.styled.jsx","components/AdminPage/OrderPage/OrderHeader/OrderHeader.jsx","components/AdminPage/OrderPage/OrderForm/OrderForm.styled.jsx","components/AdminPage/OrderPage/OrderForm/OrderForm.jsx","components/AdminPage/OrderPage/OrderServices/OrderServices.styled.jsx","components/AdminPage/OrderPage/OrderServices/OrderServices.jsx","components/AdminPage/OrderPage/OrderPayments/OrderPayments.styled.jsx","components/AdminPage/Modals/ModalAddDiscount/ModalAddDiscount.jsx","components/AdminPage/OrderPage/OrderPayments/OrderPayments.jsx","pages/Order/Order.styled.jsx","pages/Order/Order.jsx","redux/auth/authSelectors.js","redux/employees/employeesSelectors.js","redux/orders/ordersSelectors.js","redux/services/servicesSelectors.js","utils/formatedDate.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  padding-left: 50px;\n  padding-right: 50px;\n  // max-width: 1200px;\n\n  // margin-left: auto;\n  // margin-right: auto;\n  // padding-left: 15px;\n  // padding-right: 15px;\n\n  // @media screen and (min-width: 480px) {\n  //   max-width: 480px;\n  // }\n\n  // @media screen and (min-width: 768px) {\n  //   max-width: 768px;\n  // }\n\n  // @media screen and (min-width: 1200px) {\n  //   max-width: 1200px;\n  // }\n`;\n\nexport const AdminContainer = styled.div`\n  padding: 0 40px;\n  width: 100%;\n  @media screen and (min-width: 768px) {\n    padding: 0 80px;\n  }\n`;\n\nexport const HeaderContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 12px;\n  margin-bottom: 60px;\n`;\n\nexport const Section = styled.section`\n  padding-top: 40px;\n  padding-bottom: 40px;\n\n  @media screen and (min-width: 768px) {\n    padding-top: 80px;\n    padding-bottom: 80px;\n  }\n`;\n\nexport const SectionTitle = styled.h2`\ntext - align: center;\n  // margin-bottom: 30px;\n\n  font-weight: 700;\n  font-size: 28px;\n  line-height: 1.17;\n\n  @media screen and (min-width: 1200px) {\n    // margin-bottom: 50px;\n\n    font-size: 36px;\n  }\n`;\n\nexport const MainButton = styled.button`\n  margin: ${props => props.margin && `0 auto`};\n  height: 50px;\n  min-width: 200px;\n  color: ${props => (props.color ? props.color : 'var(--white-color)')};\n  background-color: transparent;\n\n  border-radius: 25px;\n  border: 1px solid var(--accent-color);\n  cursor: pointer;\n  transition: background-color var(--transition), color var(--transition);\n\n  &:hover,\n  &:focus {\n    background-color: var(--accent-color);\n    color: var(--white-color);\n  }\n\n  opacity: 0;\n  animation: fadeIn 0.5s ease-in-out forwards;\n  /* Інші стилі */\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const Header = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n  padding-bottom: 12px;\n  border-bottom: 2px solid var(--white-color);\n`;\n\nexport const Title = styled.h2``;\n\nexport const MarkUrgency = styled.b`\n  display: inline-block;\n  margin-left: 20px;\n  margin-right: 20px;\n  padding: 5px;\n  background-color: red;\n  font-size: 16px;\n  border-radius: 12px;\n`;\n\nexport const Status = styled.div`\n  position: relative;\n  display: inline-block;\n  margin-left: auto;\n  transition: scale var(--transition);\n  &:hover {\n    scale: 1.1;\n  }\n`;\n\nexport const StatusButton = styled.div`\n  display: inline-block;\n  padding: 10px;\n  //   background-color: #007bff;\n  background-color: ${props => props.color};\n  color: var(--black-color);\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  position: relative;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n\nexport const StatusSelect = styled.select`\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n`;\n","import { useDispatch } from 'react-redux';\nimport { updateOrderByNumber } from 'redux/orders/ordersOperations';\n\nimport {\n  Header,\n  Title,\n  MarkUrgency,\n  Status,\n  StatusSelect,\n  StatusButton,\n} from './OrderHeader.styled';\n\nconst statusColor = status => {\n  if (status === 'Нове') {\n    return 'var(--filter-new-color)';\n  } else if (status === 'В роботі') {\n    return 'var(--filter-inProcess-color)';\n  } else if (status === 'Скасоване') {\n    return 'var(--filter-cancelled-color)';\n  } else {\n    return 'var(--filter-completed-color)';\n  }\n};\n\nexport const OrderHeader = ({ order }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Header>\n      <Title>{`Замовлення: ${order.orderNumber}`}</Title>\n      {order.urgently && <MarkUrgency>Терміново!</MarkUrgency>}\n\n      <Status>\n        <StatusButton color={statusColor(order.status)}>\n          {order.status}\n        </StatusButton>\n        <StatusSelect\n          onChange={e => {\n            dispatch(\n              updateOrderByNumber({\n                number: order.orderNumber,\n                data: { status: e.target.value },\n              })\n            );\n          }}\n        >\n          <option value=\"\"></option>\n          <option value=\"В роботі\"> В роботі </option>\n          <option value=\"Виконане\"> Виконане </option>\n          <option value=\"Скасоване\"> Скасоване</option>\n        </StatusSelect>\n      </Status>\n    </Header>\n  );\n};\n","import styled from '@emotion/styled';\nimport { FiEdit } from 'react-icons/fi';\n\nexport const Form = styled.form`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  gap: 8px;\n  margin-bottom: 20px;\n  padding-bottom: 12px;\n  border-bottom: 2px solid var(--white-color);\n`;\n\nexport const EditButton = styled.button`\n  position: absolute;\n  top: 0;\n  right: 0;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  transition: scale var(--transition);\n  &:hover {\n    scale: 1.2;\n  }\n`;\nexport const EditIcon = styled(FiEdit)`\n  width: 30px;\n  height: 30px;\n  color: yellow;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n`;\n\nexport const TextArea = styled.textarea`\n  padding: 5px;\n  resize: none;\n  border: none;\n  border-radius: 8px;\n  transition: background-color var(--transition), color var(--transition);\n  :disabled {\n    background-color: transparent;\n    color: var(--white-color);\n  }\n`;\n\nexport const Input = styled.input`\n  padding: 5px;\n  border: none;\n  border-radius: 8px;\n  transition: background-color var(--transition), color var(--transition);\n  :disabled {\n    background-color: transparent;\n    color: var(--white-color);\n  }\n`;\n\nexport const Select = styled.select`\n  padding: 5px;\n  border: none;\n  border-radius: 8px;\n  transition: background-color var(--transition), color var(--transition);\n  :disabled {\n    background-color: transparent;\n    color: var(--white-color);\n    opacity: 1;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { updateOrderByNumber } from 'redux/orders/ordersOperations';\nimport { formatedDate } from 'utils/formatedDate';\n\nimport {\n  Form,\n  EditButton,\n  EditIcon,\n  Label,\n  TextArea,\n  Input,\n  Select,\n} from './OrderForm.styled';\nimport { MainButton } from 'components/Global/Global.styled';\n\nexport const OrderForm = ({ order, employees, admins }) => {\n  const [isEdit, setEdit] = useState(false);\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      washer: order.washer || '',\n      clientComment: order.clientComment || '',\n      clientName: order.clientName || '',\n      clientPhone: order.clientPhone || '',\n      serviceObject: order.serviceObject || '',\n      orderDate: order.orderDate || '',\n      administrator: order.administrator || '',\n      payment: order.payment || '',\n    },\n    onSubmit: values => {\n      dispatch(\n        updateOrderByNumber({ number: order.orderNumber, data: values })\n      );\n      setEdit(false);\n    },\n  });\n\n  return (\n    <Form onSubmit={formik.handleSubmit}>\n      <EditButton type=\"button\" onClick={() => setEdit(!isEdit)}>\n        <EditIcon />\n      </EditButton>\n      <Label>\n        Коментар:\n        <TextArea\n          disabled={!isEdit}\n          cols=\"60\"\n          type=\"text\"\n          id=\"clientComment\"\n          name=\"clientComment\"\n          value={formik.values.clientComment}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        />\n      </Label>\n      <Label>\n        Клієнт:\n        <Input\n          disabled={!isEdit}\n          type=\"text\"\n          id=\"clientName\"\n          name=\"clientName\"\n          value={formik.values.clientName}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        />\n      </Label>\n      <Label>\n        Контакти:\n        <Input\n          disabled={!isEdit}\n          type=\"text\"\n          id=\"clientPhone\"\n          name=\"clientPhone\"\n          value={formik.values.clientPhone}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        />\n      </Label>\n      <Label>\n        Об'єкт послуг:\n        <Input\n          disabled={!isEdit}\n          type=\"text\"\n          id=\"serviceObject\"\n          name=\"serviceObject\"\n          value={formik.values.serviceObject}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        />\n      </Label>\n      <Label>\n        Дата та час заїзду:\n        <Input\n          disabled={!isEdit}\n          type=\"datetime-local\"\n          id=\"orderDate\"\n          name=\"orderDate\"\n          value={formik.values.orderDate}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        />\n      </Label>\n      {order.orderExecutionDate && (\n        <p>{`Дата та час виконання: ${formatedDate(\n          order.orderExecutionDate\n        )}`}</p>\n      )}\n      <Label>\n        Оплата:\n        <Select\n          disabled={!isEdit}\n          id=\"payment\"\n          name=\"payment\"\n          value={formik.values.payment}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        >\n          <option value=\"\"> </option>\n          <option value=\"Готівка\">Готівка </option>\n          <option value=\"Безготівка\">Безготівка </option>\n        </Select>\n      </Label>\n      <Label>\n        Адміністратор:\n        <Select\n          disabled={!isEdit}\n          required\n          id=\"administrator\"\n          name=\"administrator\"\n          value={formik.values.administrator}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        >\n          <option value=\"\"> </option>\n          {admins &&\n            admins.map(admin => (\n              <option value={admin.name} key={admin._id}>\n                {admin.name}\n              </option>\n            ))}\n        </Select>\n      </Label>\n\n      <Label>\n        Працівник:\n        <Select\n          disabled={!isEdit}\n          required\n          id=\"washer\"\n          name=\"washer\"\n          value={formik.values.washer}\n          onChange={formik.handleChange}\n          variant=\"standard\"\n        >\n          <option value=\"\"> </option>\n          {employees &&\n            employees.map(employee => (\n              <option value={employee.name} key={employee._id}>\n                {employee.name}\n              </option>\n            ))}\n        </Select>\n      </Label>\n      {isEdit && <MainButton type=\"submit\">Зберегти зміни</MainButton>}\n    </Form>\n  );\n};\n","import styled from '@emotion/styled';\nimport { FiTrash2 } from 'react-icons/fi';\n\nexport const ServicesContainer = styled.div`\n  padding-bottom: 12px;\n  margin-bottom: 20px;\n  border-bottom: 2px solid var(--white-color);\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nexport const PartTitle = styled.h3``;\n\nexport const AddServices = styled.div`\n  position: relative;\n  display: inline-block;\n  margin-left: auto;\n  opacity: 0.7;\n  transition: opacity var(--transition);\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const AddServicesButton = styled.div`\n  position: relative;\n  display: inline-block;\n  padding: 10px;\n  background-color: #007bff;\n  // background-color: ${props => props.color};\n  color: var(--black-color);\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n`;\n\nexport const ServicesSelect = styled.select`\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n`;\n\n// Табличка з послугами\n\nexport const Table = styled.table`\n  width: 100%;\n  min-height: 90px;\n  border-collapse: collapse;\n  border-spacing: 0;\n  background-color: #f4f4f4;\n  color: black;\n  border-radius: 8px;\n  overflow: hidden;\n`;\n\nexport const TableHead = styled.thead`\n  background-color: #0073e6;\n  color: #fff;\n  text-align: left;\n`;\n\nexport const TableRow = styled.tr`\n  &:nth-of-type(even) {\n    background-color: #e6e6e6;\n  }\n`;\n\nexport const TableHeader = styled.th`\n  padding: 10px;\n  width: max-content;\n`;\n\nexport const TableNameHeader = styled.th`\n  padding: 10px;\n  width: 60%;\n`;\n\nexport const TableData = styled.td`\n  padding: 10px;\n`;\n\nexport const AmountInput = styled.input`\n  width: 50px;\n`;\n\nexport const DeleteBtn = styled.button`\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n  opacity: 0.5;\n  transition: opacity var(--transition);\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const DeleteIcon = styled(FiTrash2)`\n  width: 25px;\n  height: 25px;\n  color: red;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllServices } from 'redux/services/servicesOperations';\nimport { selectGetAllServices } from 'redux/services/servicesSelectors';\nimport { updateOrderByNumber } from 'redux/orders/ordersOperations';\n// import throttle from 'lodash.throttle';\n\nimport {\n  ServicesContainer,\n  Header,\n  PartTitle,\n  AddServices,\n  AddServicesButton,\n  ServicesSelect,\n  Table,\n  TableHead,\n  TableRow,\n  TableNameHeader,\n  TableHeader,\n  TableData,\n  AmountInput,\n  DeleteBtn,\n  DeleteIcon,\n} from './OrderServices.styled';\n\nexport const OrderServices = ({ services, orderNumber }) => {\n  const allServices = useSelector(selectGetAllServices);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllServices());\n  }, [dispatch]);\n\n  const handleAddService = service => {\n    if (\n      !services.some(existingService => existingService._id === service._id)\n    ) {\n      const updatedServices = [...services, service];\n      dispatch(\n        updateOrderByNumber({\n          number: orderNumber,\n          data: { services: updatedServices },\n        })\n      );\n    }\n  };\n\n  const handleDeleteService = serviceId => {\n    const updatedServices = services.filter(\n      preService => preService._id !== serviceId\n    );\n    dispatch(\n      updateOrderByNumber({\n        number: orderNumber,\n        data: { services: updatedServices },\n      })\n    );\n  };\n\n  const handleChangeAmount = (serviceId, newAmount) => {\n    const updatedServices = services.map(service => {\n      if (service._id === serviceId) {\n        return { ...service, amount: newAmount };\n      }\n      return service;\n    });\n    dispatch(\n      updateOrderByNumber({\n        number: orderNumber,\n        data: { services: updatedServices },\n      })\n    );\n  };\n\n  return (\n    <ServicesContainer>\n      <Header>\n        <PartTitle>Послуги:</PartTitle>\n        <AddServices>\n          <AddServicesButton>Додати послугу</AddServicesButton>\n          <ServicesSelect\n            onChange={e => handleAddService(JSON.parse(e.target.value))}\n          >\n            <option value=\"\"></option>\n            {allServices.map(service => (\n              <option value={JSON.stringify(service)} key={service._id}>\n                {`${service.category}. ${service.name}. ${service.price}грн`}\n              </option>\n            ))}\n          </ServicesSelect>\n        </AddServices>\n      </Header>\n\n      {services && (\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableNameHeader>Назва</TableNameHeader>\n              <TableHeader>Кількість</TableHeader>\n              <TableHeader>Вартість</TableHeader>\n              <TableHeader>Сума</TableHeader>\n              <TableHeader></TableHeader>\n            </TableRow>\n          </TableHead>\n          <tbody>\n            {services.map(service => (\n              <TableRow key={service._id}>\n                <TableData>{service.name}</TableData>\n                <TableData>\n                  {service.pricePerMeter ? (\n                    <AmountInput\n                      type=\"number\"\n                      defaultValue={service.amount || 1}\n                      min=\"1\"\n                      onChange={e =>\n                        handleChangeAmount(service._id, e.target.value)\n                      }\n                    />\n                  ) : (\n                    1\n                  )}\n                </TableData>\n\n                <TableData>{service.price}</TableData>\n                <TableData>{service.price * (service.amount || 1)}</TableData>\n                <TableData>\n                  <DeleteBtn onClick={() => handleDeleteService(service._id)}>\n                    <DeleteIcon />\n                  </DeleteBtn>\n                </TableData>\n              </TableRow>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </ServicesContainer>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const PaymentsContainer = styled.div`\n  padding-bottom: 12px;\n`;\n\nexport const PartHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nexport const PartTitle = styled.h3``;\n\nexport const AddDiscountButton = styled.button`\n  padding: 10px;\n  background-color: #007bff;\n  color: var(--black-color);\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  opacity: 0.7;\n  transition: opacity var(--transition);\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const PaymentsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nexport const Payment = styled.li`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Text = styled.p``;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useFormik } from 'formik';\n\nimport { Backdrop, Modal, Form, Title, CloseButton } from '../Modal.styles';\nimport { TextField } from '@mui/material';\n\nimport { selectOrderByNumber } from 'redux/orders/ordersSelectors';\nimport { updateOrderByNumber } from 'redux/orders/ordersOperations';\n\nexport const ModalAddDiscount = props => {\n  const order = useSelector(selectOrderByNumber);\n\n  const dispatch = useDispatch();\n\n  const handleExitModal = () => {\n    props.handleExitModal(true);\n  };\n\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      handleExitModal(true);\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      discountPercent: '',\n    },\n    onSubmit: values => {\n      dispatch(\n        updateOrderByNumber({ number: order.orderNumber, data: { ...values } })\n      );\n      handleExitModal();\n    },\n  });\n\n  return (\n    <Backdrop onClick={handleBackdropClick}>\n      <Modal>\n        <CloseButton type=\"button\" onClick={handleExitModal}>\n          Закрити\n        </CloseButton>\n        <Form onSubmit={formik.handleSubmit}>\n          <Title>Додати знижку</Title>\n          <TextField\n            required\n            type=\"text\"\n            id=\"discountPercent\"\n            name=\"discountPercent\"\n            label=\"Відсоток знижки\"\n            value={formik.values.discountPercent}\n            onChange={formik.handleChange}\n            variant=\"standard\"\n            className=\"field\"\n          />\n          <button type=\"submit\" className=\"btn\">\n            Додати\n          </button>\n        </Form>\n      </Modal>\n    </Backdrop>\n  );\n};\n","import { useState } from 'react';\n\nimport {\n  PaymentsContainer,\n  PartHeader,\n  PartTitle,\n  AddDiscountButton,\n  PaymentsList,\n  Payment,\n  Text,\n} from './OrderPayments.styled';\nimport { ModalAddDiscount } from '../../Modals/ModalAddDiscount/ModalAddDiscount';\n\nexport const OrderPayments = ({ order }) => {\n  const [isOpenModal, setOpenModal] = useState(false);\n\n  const handleExitModal = () => {\n    setOpenModal(false);\n  };\n  return (\n    <PaymentsContainer>\n      <PartHeader>\n        <PartTitle>Розрахунок:</PartTitle>\n        <AddDiscountButton onClick={() => setOpenModal(true)}>\n          Додати знижку\n        </AddDiscountButton>\n      </PartHeader>\n      <PaymentsList>\n        <Payment>\n          <Text>Загальна вартість:</Text>\n          <Text>{`${order.totalCostOrder} грн`}</Text>\n        </Payment>\n        <Payment>\n          <Text>Знижка:</Text>\n          <Text>{`${order.discountPercent}%`}</Text>\n        </Payment>\n        <Payment>\n          <Text>Вартість зі знижкою:</Text>\n          <Text>{`${order.discountedCostOrder} грн`}</Text>\n        </Payment>\n        <Payment>\n          <Text>Виплата працівнику:</Text>\n          <Text>{`${order.washerPayment} грн`}</Text>\n        </Payment>\n        <Payment>\n          <Text>Виплата адміністратору:</Text>\n          <Text>{`${order.administratorPayment} грн`}</Text>\n        </Payment>\n        <Payment>\n          <Text>Дохід:</Text>\n          <Text>{`${order.revenue} грн`}</Text>\n        </Payment>\n      </PaymentsList>\n\n      {isOpenModal && <ModalAddDiscount handleExitModal={handleExitModal} />}\n    </PaymentsContainer>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const OrderCardContainer = styled.div`\n  padding: 20px;\n  background-color: #424549;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { Section } from 'components/Global/Global.styled';\nimport { OrderHeader } from 'components/AdminPage/OrderPage/OrderHeader/OrderHeader';\nimport { OrderForm } from 'components/AdminPage/OrderPage/OrderForm/OrderForm';\nimport { OrderServices } from 'components/AdminPage/OrderPage/OrderServices/OrderServices';\nimport { OrderPayments } from 'components/AdminPage/OrderPage/OrderPayments/OrderPayments';\nimport { Loading } from 'components/Loading/Loading';\n\nimport { getOrderByNumber } from 'redux/orders/ordersOperations';\nimport { getAllEmployees } from 'redux/employees/employeesOperations';\nimport { getAdministrators } from 'redux/auth/authOperations';\n\nimport {\n  selectEmployees,\n  selectIsLoadingEmployees,\n} from 'redux/employees/employeesSelectors';\nimport {\n  selectIsLoadingOrders,\n  selectOrderByNumber,\n} from 'redux/orders/ordersSelectors';\nimport { selectAdministrators } from 'redux/auth/authSelectors';\nimport { OrderCardContainer } from './Order.styled';\n\nconst OrderPage = () => {\n  const { id: number } = useParams();\n  const dispatch = useDispatch();\n\n  const order = useSelector(selectOrderByNumber);\n  const employees = useSelector(selectEmployees);\n  const admins = useSelector(selectAdministrators);\n  const isLoadingOrder = useSelector(selectIsLoadingOrders);\n  const isLoadingEmployees = useSelector(selectIsLoadingEmployees);\n\n  useEffect(() => {\n    dispatch(getAllEmployees());\n    dispatch(getAdministrators());\n    dispatch(getOrderByNumber(number));\n  }, [dispatch, number]);\n\n  if (isLoadingOrder || isLoadingEmployees) {\n    return <Loading />;\n  }\n\n  return (\n    <Section>\n      <OrderCardContainer>\n        <OrderHeader order={order} />\n        <OrderForm order={order} employees={employees} admins={admins} />\n        <OrderServices\n          services={order.services}\n          orderNumber={order.orderNumber}\n        />\n        <OrderPayments order={order} />\n      </OrderCardContainer>\n    </Section>\n  );\n};\n\nexport default OrderPage;\n","export const selectAuth = state => {\n  const { isLoggedIn, token } = state.auth;\n  return { isLoggedIn, token };\n};\n\nexport const selectIsAuthLoading = state => state.auth.isLoading;\n\nexport const selectIsLoggedIn = state => state.auth.isLoggedIn;\n\nexport const selectUser = state => state.auth.user;\n\nexport const selectError = state => state.auth.error;\n\nexport const selectToken = state => state.auth.token;\n\nexport const selectAdministrators = state => state.auth.administrators;\n\n// export const selectUserAvatar = state => state.auth.user.avatarURL;\n\n// export const selectIsRefreshing = state => state.auth.isRefreshing;\n\n// export const selectIsLoading = state => state.auth.isLoading;\n\n// export const selectUserId = state => state.auth.user.id;\n","export const selectEmployees = state => state.employees.items;\n\nexport const selectIsLoadingEmployees = state => state.employees.isLoading;\n","// бере зі стейту оголошення по категорії\nexport const selectOrders = state => state.orders.items;\n\n// Отримуємо замовлення по номеру\nexport const selectOrderByNumber = state => state.orders.orderByNumber;\n\n// Отримуємо статус завантаження\nexport const selectIsLoadingOrders = state => state.orders.isLoading;\n\n// бере зі стейту кількість сторінок у відповіді\n// export const selectTotalPages = state => state.notices.totalPages;\n// бере зі стейту чи завантажується\n// export const selectIsNoticeLoading = state => state.notices.isLoading;\n// export const selectCategory = state => state.notices.category;\n// export const selectIsFavorite = state => state.notices.isFavorite;\n\n// export const selectNotice = state => state.notices.notice;\n\n// export const selectNoticesFavorite = state => state.notices.noticesFavorite;\n\n// export const selectNoticesMyAds = state => state.notices.noticesMyAds;\n","export const selectGetAllServices = state => state.services.items;\n\nexport const selectIsLoadingServices = state => state.services.isLoading;\n","export function formatedDate(unformatedDate) {\n  const dateTime = new Date(unformatedDate);\n\n  const date = dateTime.toLocaleDateString('uk-UA', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n  });\n\n  const time = dateTime.toLocaleTimeString('uk-UA', {\n    hour: '2-digit',\n    minute: '2-digit',\n  });\n\n  return `${date} ${time}`;\n}\n"],"names":["AdminContainer","styled","HeaderContainer","Section","SectionTitle","MainButton","props","margin","color","Header","Title","MarkUrgency","Status","StatusButton","StatusSelect","OrderHeader","status","order","dispatch","useDispatch","orderNumber","urgently","onChange","e","updateOrderByNumber","number","data","target","value","Form","EditButton","EditIcon","FiEdit","Label","TextArea","Input","Select","OrderForm","employees","admins","useState","isEdit","setEdit","formik","useFormik","initialValues","washer","clientComment","clientName","clientPhone","serviceObject","orderDate","administrator","payment","onSubmit","values","handleSubmit","type","onClick","disabled","cols","id","name","handleChange","variant","orderExecutionDate","formatedDate","required","map","admin","_id","employee","ServicesContainer","PartTitle","AddServices","AddServicesButton","ServicesSelect","Table","TableHead","TableRow","TableHeader","TableNameHeader","TableData","AmountInput","DeleteBtn","DeleteIcon","FiTrash2","OrderServices","services","allServices","useSelector","selectGetAllServices","useEffect","getAllServices","service","some","existingService","updatedServices","handleAddService","JSON","parse","stringify","category","price","pricePerMeter","defaultValue","amount","min","serviceId","newAmount","handleChangeAmount","filter","preService","handleDeleteService","PaymentsContainer","PartHeader","AddDiscountButton","PaymentsList","Payment","Text","ModalAddDiscount","selectOrderByNumber","handleExitModal","discountPercent","currentTarget","TextField","label","className","OrderPayments","isOpenModal","setOpenModal","totalCostOrder","discountedCostOrder","washerPayment","administratorPayment","revenue","OrderCardContainer","useParams","selectEmployees","selectAdministrators","isLoadingOrder","selectIsLoadingOrders","isLoadingEmployees","selectIsLoadingEmployees","getAllEmployees","getAdministrators","getOrderByNumber","Loading","selectIsLoggedIn","state","auth","isLoggedIn","administrators","items","isLoading","selectOrders","orders","orderByNumber","unformatedDate","dateTime","Date","date","toLocaleDateString","day","month","year","time","toLocaleTimeString","hour","minute"],"sourceRoot":""}